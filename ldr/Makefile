####################################################################################################
#
#  Makefile for bootloader.
#  External vars my be:
#    arch      - target arch
#    dbg       - debug flag
#    cfgdir    - path to dir that contents sys-config.h
#    blddir    - path to dir that will content build result
#
####################################################################################################

blddir     ?= build
target     ?= bootloader.elf
objs       := $(arch)/crt0.o $(arch)/crt1.o main.o ramfs.generate.o
baseflags  := -U$(arch) # undefine built-in macro (least for sparc undef 'sparc=1')
baseflags  += -O0 # avoid optimization to allow build ramfs, TODO:  use -O2 and fix problem
baseflags  += -Wall -Werror
cxxflags   := -std=c++11
cxxflags   += -fno-rtti # no-rtti to avoid undefined reference to `vtable ...'
cxxflags   += -fno-exceptions
incflags   := -I$(cfgdir)
incflags   += -I$(arch)
incflags   += -I../lib/uart/$(uart)
incflags   += -I../lib/elfloader
incflags   += -I../lib/list
incflags   += -I../lib/l4/inc
incflags   += -I../lib/sys
incflags   += -I../lib/sys/$(arch)
incflags   += -I../lib/wlibc/inc
use_libs   += elfloader/libelfloader.a
use_libs   += wlibc/libwlibc.a
use_libs   += wstdc++/libwstdc++.a
use_libs   += sys/libsys.a
libs       := $(addprefix $(blddir)/../lib/,$(use_libs))
use_libgcc := 1
ldflags    :=
asflags    :=
cflags     :=

ifeq ($(dbg),1)
  baseflags += -g
  baseflags += -DDEBUG
else
  baseflags += -DNDEBUG
endif

include ../mk/base.mk
include ../mk/syscfg.mk

postbuild-target:

# generate ramfs.generate.c
# format of 'ldr_ramfs':  name1:path1:align1 name2:path2:align2 ...
$(blddir)/ramfs.generate.c: $(ramfs_files)
	@mkdir -p $(blddir); \
	file=$(blddir)/ramfs.generate.c; \
	echo -e "// Generated by ldr/Makfile, don't edit me.\n"  > $$file; \
	echo -e "#include \"sys_ramfs.h\"\n"                        >> $$file; \
	echo -e "#include \"sys-config.h\"\n"                   >> $$file; \
	cnt=0; \
	for item in $(ldr_ramfs); do \
		arr=($$(echo $$item | tr ":" " ")); \
		name=$${arr[0]}; \
		path=$${arr[1]}; \
		algn=$${arr[2]}; \
		size=$$(stat -c%s $$path); \
		printf "    file%02d:  %16s  %8u  %s\n" $$cnt $$name $$size $$path; \
		echo -e "// $$name, $$path" >> $$file; \
		echo -e "static const unsigned char hexdump$$cnt[] __attribute__((aligned($$algn))) =\n{" >> $$file; \
		if [ ! -f "$$path" ]; then \
			echo -e "ERROR:  no such file:  '$$path'.\n"; \
			rm $$file; \
			exit -1; \
		fi; \
		hexdump -v -e '/1 "0x%02x, "' $$path  |  sed -e "s/\([^ ]* \)\{16\}/    &\n/g" >> $$file; \
		echo -e "\n};\n" >> $$file; \
		((cnt += 1)); \
	done; \
	echo -e "#define UNUSED __attribute__((unused))" >> $$file; \
	echo -e "#define SECTION __attribute__((section(\".first\")))\n" >> $$file; \
	echo -e "static const Ramfs_file_header_t UNUSED ramfs[] SECTION =\n{" >> $$file; \
	cnt=0; \
	for item in $(ldr_ramfs); do \
		arr=($$(echo $$item | tr ":" " ")); \
		name=$${arr[0]}; \
		echo -e "    {"                                  >> $$file; \
		echo -e "        .name = \"$$name\","            >> $$file; \
		echo -e "        .size = sizeof(hexdump$$cnt),"  >> $$file; \
		echo -e "        .data = hexdump$$cnt"           >> $$file; \
		echo -e "    },"                                 >> $$file; \
		((cnt += 1)); \
	done; \
	echo -e "    {"                                      >> $$file; \
	echo -e "        .name = 0,"                         >> $$file; \
	echo -e "        .size = 0,"                         >> $$file; \
	echo -e "        .data = 0"                          >> $$file; \
	echo -e "    },"                                     >> $$file; \
	echo -e "};\n"                                       >> $$file; \

# special rule to build generated c-file
$(blddir)/ramfs.generate.o:  $(blddir)/ramfs.generate.c
	@$(echo) "$(color_compile)[CC] <files> --> $@$(color_off)"
	$(v)$(gccprefix)gcc $(cflags) -c $(blddir)/ramfs.generate.c -o $(blddir)/ramfs.generate.o

# special rule to clean generated c-file
preclean-target:
	$(v)rm -fr $(blddir)/ramfs.generate.c
